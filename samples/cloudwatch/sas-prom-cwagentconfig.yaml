kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-cwagentconfig
  namespace: amazon-cloudwatch
data:
  cwagentconfig.json: |
    {
      "agent": {
        "region": "us-east-1",
        "debug": true
      },
      "logs": {
        "metrics_collected": {
          "prometheus": {
            "cluster_name": "orion3-eks",
            "log_group_name": "/aws/containerinsights/orion3-eks/prometheus",
            "prometheus_config_path": "/etc/prometheusconfig/prometheus.yaml",
            "emf_processor": {
              "metric_declaration": [
                {
                  "source_labels": ["Service"],
                  "label_matcher": ".*nginx.*",
                  "dimensions": [["Service","Namespace","ClusterName"]],
                  "metric_selectors": [
                    "^nginx_ingress_controller_(requests|success)$",
                    "^nginx_ingress_controller_nginx_process_connections$",
                    "^nginx_ingress_controller_nginx_process_connections_total$",
                    "^nginx_ingress_controller_nginx_process_resident_memory_bytes$",
                    "^nginx_ingress_controller_nginx_process_cpu_seconds_total$",
                    "^nginx_ingress_controller_config_last_reload_successful$"
                  ]
                },
                {
                  "source_labels": ["Service"],
                  "label_matcher": ".*nginx.*",
                  "dimensions": [["Service","Namespace","ClusterName","ingress"],["Service","Namespace","ClusterName","status"]],
                  "metric_selectors": ["^nginx_ingress_controller_requests$"]
                },
                {
                  "source_labels": ["Service", "frontend"],
                  "label_matcher": ".*haproxy-ingress-.*metrics;(httpfront-shared-frontend|httpfront-default-backend|httpsfront|_front_http)",
                  "dimensions": [["Service","Namespace","ClusterName","frontend","code"]],
                  "metric_selectors": [
                    "^haproxy_frontend_http_responses_total$"
                  ]
                },
                {
                  "source_labels": ["Service", "backend"],
                  "label_matcher": ".*haproxy-ingress-.*metrics;(httpback-shared-backend|httpback-default-backend|httpsback-shared-backend|_default_backend)",
                  "dimensions": [["Service","Namespace","ClusterName","backend","code"]],
                  "metric_selectors": [
                    "^haproxy_backend_http_responses_total$"
                  ]
                },
                {
                  "source_labels": ["Service"],
                  "label_matcher": ".*haproxy-ingress-.*metrics",
                  "dimensions": [["Service","Namespace","ClusterName"]],
                  "metric_selectors": [
                    "^haproxy_backend_up$",
                    "^haproxy_backend_status$",
                    "^haproxy_backend_bytes_(in|out)_total$",
                    "^haproxy_backend_connections_total$",
                    "^haproxy_backend_connection_errors_total$",
                    "^haproxy_backend_current_sessions$",
                    "^haproxy_frontend_bytes_(in|out)_total$",
                    "^haproxy_frontend_connections_total$",
                    "^haproxy_frontend_http_requests_total$",
                    "^haproxy_frontend_request_errors_total$",
                    "^haproxy_frontend_requests_denied_total$",
                    "^haproxy_frontend_current_sessions$"
                  ]
                },
                {
                  "source_labels": ["Service"],
                  "label_matcher": ".*memcached.*",
                  "dimensions": [["Service","Namespace","ClusterName"]],
                  "metric_selectors": [
                    "^memcached_current_(bytes|items|connections)$",
                    "^memcached_items_(reclaimed|evicted)_total$",
                    "^memcached_(written|read)_bytes_total$",
                    "^memcached_limit_bytes$",
                    "^memcached_commands_total$"
                  ]
                },
                {
                  "source_labels": ["Service", "status", "command"],
                  "label_matcher": ".*memcached.*;hit;get",
                  "dimensions": [["Service","Namespace","ClusterName","status","command"]],
                  "metric_selectors": [
                    "^memcached_commands_total$"
                  ]
                },
                {
                  "source_labels": ["Service", "command"],
                  "label_matcher": ".*memcached.*;(get|set)",
                  "dimensions": [["Service","Namespace","ClusterName","command"]],
                  "metric_selectors": [
                    "^memcached_commands_total$"
                  ]
                },
                {
                  "source_labels": ["container_name"],
                  "label_matcher": "^envoy$",
                  "dimensions": [["ClusterName","Namespace"]],
                  "metric_selectors": [
                    "^envoy_http_downstream_rq_(total|xx)$",
                    "^envoy_cluster_upstream_cx_(r|t)x_bytes_total$",
                    "^envoy_cluster_membership_(healthy|total)$",
                    "^envoy_server_memory_(allocated|heap_size)$",
                    "^envoy_cluster_upstream_cx_(connect_timeout|destroy_local_with_active_rq)$",
                    "^envoy_cluster_upstream_rq_(pending_failure_eject|pending_overflow|timeout|per_try_timeout|rx_reset|maintenance_mode)$",
                    "^envoy_http_downstream_cx_destroy_remote_active_rq$",
                    "^envoy_cluster_upstream_flow_control_(paused_reading_total|resumed_reading_total|backed_up_total|drained_total)$",
                    "^envoy_cluster_upstream_rq_retry$",
                    "^envoy_cluster_upstream_rq_retry_(success|overflow)$",
                    "^envoy_server_(version|uptime|live)$"
                  ]
                },
                {
                  "source_labels": ["container_name"],
                  "label_matcher": "^envoy$",
                  "dimensions": [["ClusterName","Namespace","envoy_http_conn_manager_prefix","envoy_response_code_class"]],
                  "metric_selectors": [
                    "^envoy_http_downstream_rq_xx$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "^kubernetes-pod-jmx$",
                  "dimensions": [["ClusterName","Namespace"]],
                  "metric_selectors": [
                    "^jvm_threads_(current|daemon)$",
                    "^jvm_classes_loaded$",
                    "^java_lang_operatingsystem_(freephysicalmemorysize|totalphysicalmemorysize|freeswapspacesize|totalswapspacesize|systemcpuload|processcpuload|availableprocessors|openfiledescriptorcount)$",
                    "^catalina_manager_(rejectedsessions|activesessions)$",
                    "^jvm_gc_collection_seconds_(count|sum)$",
                    "^catalina_globalrequestprocessor_(bytesreceived|bytessent|requestcount|errorcount|processingtime)$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "^kubernetes-pod-jmx$",
                  "dimensions": [["ClusterName","Namespace","area"]],
                  "metric_selectors": [
                    "^jvm_memory_bytes_used$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "^kubernetes-pod-jmx$",
                  "dimensions": [["ClusterName","Namespace","pool"]],
                  "metric_selectors": [
                    "^jvm_memory_pool_bytes_used$"
                  ]
                },
                {
                  "source_labels": ["cas_server"],
                  "label_matcher": ".+",
                  "dimensions": [["ClusterName", "namespace", "cas_server"]],
                  "metric_selectors": [
                    "^cas_.+$"
                  ]
                },
                {
                  "source_labels": ["cas_node"],
                  "label_matcher": ".+",
                  "dimensions": [["ClusterName", "namespace", "cas_node"]],
                  "metric_selectors": [
                    "^cas_.+$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "sas-arke",
                  "dimensions": [["ClusterName", "namespace", "pod", "ClientIdentitifer"]],
                  "metric_selectors": [
                    "^arke_.+$"
                  ]
                },
                {
                  "source_labels": ["sas_service_base"],
                  "label_matcher": "(golang|spring)",
                  "dimensions": [["ClusterName", "namespace", "job", "pod", "sas_service_base"]],
                  "metric_selectors": [
                    "^.+$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "sas-rabbitmq-server",
                  "dimensions": [["ClusterName", "namespace", "service"]],
                  "metric_selectors": [
                    "^_.+$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "sas-crunchy-data-postgres",
                  "dimensions": [["ClusterName", "namespace", "service"]],
                  "metric_selectors": [
                    "^_.+$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "sas-crunchy-data-postgres",
                  "dimensions": [["ClusterName", "namespace", "service", "dbname"]],
                  "metric_selectors": [
                    "^ccp_stat_database_.+$"
                  ]
                },
                {
                  "source_labels": ["job"],
                  "label_matcher": "sas-crunchy-data-postgres",
                  "dimensions": [["ClusterName", "namespace", "service", "dbname","schemaname"]],
                  "metric_selectors": [
                    "^ccp_stat_user_tables_.+$"
                  ]
                }
              ]
            }
          }
        },
        "force_flush_interval": 5
      }
    }

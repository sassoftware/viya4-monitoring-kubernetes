# Version 1.9.6
[PARSER]
       Name          consul
       Format        regex
       Regex (?<timestamp>\d{4}\/\d\d\/\d\d \d\d:\d\d:\d\d) (?:\[(?<level>[A-Z]*)\] |)(?<message>.*)
       Time_Key      timestamp
       Time_format   %Y/%m/%d%n%R:%S
[PARSER]
       Name          consul_telemetry
       Format        regex
       Regex (?<timestamp>\d{4}-\d\d-\d\d \d\d:\d\d:\d\d [+-]\d{4} [A-Z]{3})\]\[(?<type>[A-Z])\] '(?<metric>[^']+)': (?<message>.*)
       Time_Key      timestamp
       Time_format   %F %T %z
[PARSER]
       Name          vault
       Format        regex
       Regex (?<timestamp>\d{4}\/\d\d\/\d\d \d\d:\d\d:\d\d\.\d{6}) (?:\[?(?<level>[A-Z]+) ?\]?:? |)(?<message>.*)
       Time_Key      timestamp
       Time_format   %Y/%m/%d%n%R:%S
[PARSER]
       # possibly problematic
       Name          consul_vault_reload
       Format        regex
       regex  ==> (?:(?<level>[A-Z]*): |)(?<message>.*)
[PARSER]
       Name          crunchy_database
       Format        regex
       regex         (?<timestamp>\d{4}-\d{2}-\d{2} (\d{2}:?){3},\d{3}) (?<level>\w+):\s+(?<message>.*)
       Time_Key      timestamp
       Time_format   %F %H:%M:%S,%L
[PARSER]
       Name          istioPilot
       # hacked together
       Format        regex
       regex  (?<timestamp>\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d\.\d+Z)\s+(?<level>\w+)\s+(?<message>.+)
       Time_Key      timestamp
       #Time_format   %Y-%m-%dT%H:%M:%S.%L %z
[PARSER]
       Name          istioPilot2
       # hacked together
       Format        regex
       regex  (?<message>.+)
[PARSER]
       Name          fluentbit
       # hacked together
       Format        regex
       regex  \[(?<timestamp>\d{4}\/\d\d\/\d\d \d\d:\d\d:\d\d)\]\s*\[\s?(?<level>\w+)\]\s*(?<message>\[?\w+:?\w+\]?\s*.*)
       Time_Key      timestamp
       Time_format   %Y/%m/%d %T
[PARSER]
       Name          operatorx
       Format        logfmt
[PARSER]
       Name          operator
       Format        regex
       regex         time="(?<timestamp>\d{4}-\d{2}-\d{2} (\d{2}:?){3} (-|\+)\d{4})" level=(?<level>\w+)\s+msg=(?<message>.*)
       Time_Key      timestamp
       Time_format   %Y-%m-%d %H:%M:%S %z
[PARSER]
       Name          k8sdash
       # kubernetes-dasboard
       Format        regex
       regex (?<ip_address>(\d+\.?){4}) - - \[(?<timestamp>\d{2}\/\w{3}\/\d{4}(:\d{2}){3} (-|\+)\d{4})]\s*(?<message>.+)
       Time_Key      timestamp
       Time_format   %e/%b/%Y:%k:%M:%S %z
[PARSER]
       Name          elasticsearch
       # ODFE
       Format        regex
       regex         \[(?<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2},\d{3})\]\[(?<level>\w+)\s*\](?<message>\[(\S*)\s*\]\s*\[(\S+)\]\s*(.+))
       Time_Key      timestamp
       Time_format   %Y-%m-%dT%H:%M:%S,%L
[PARSER]
       Name          nginx-ingress
       # nginx-ingress-controller
       Format        regex
       regex         (?<remote_host>(\d+\.?){4}) ((\S+)|-) ((?<user>\S+)|-) \[(?<timestamp>\d{2}\/\w{3}\/\d{4}(:\d{2}){3} (-|\+)\d{4})]\s*(?<message>(?<request>"(?<method>\S+) (?<url>.+?)") (?<status>\d{3}) .+)
       Time_Key      timestamp
       Time_format   %e/%b/%Y:%k:%M:%S %z
[PARSER]
       Name          nginx-ingress-stderr1
       # nginx-ingress-controller - STDERR Messages
       Format        regex
       regex         (?<timestamp>\d{4}\/\d{2}\/\d{2} (\d{2}:?){3}) \[(?<level>\w+)\] (?<message>.+)
       Time_Key      timestamp
       Time_format   %Y/%m/%d %T
[PARSER]
       Name          misc-stderr2
       # A frequently seen format for messages from stderr; starts w/ a single character LEVEL
       # seen:  nginx-ingress-controller, K8s Operators
       Format        regex
       regex         (?<level>[A-Z]{1})(?<msgtime>\d{2}\d{2} (\d{2}:?){3}.\d{3})\d{3}\s+((?<caller>.+)]\s)?(?<message>.+)
       Time_Key      msgtime
       Time_format   %m%d %H:%M:%S.%L
[PARSER]
       Name          sas-rabbitmq
       # sas-rabbitmq-server
       Format        regex
       regex         (?<timestamp>\d{4}-\d{2}-\d{2} (\d{2}:?){3}\.\d{3}) \[(?<level>\w+)\] (?<message>.+)
       Time_Key      timestamp
       Time_format   %Y-%m-%d %H:%M:%S.%L
[PARSER]
       Name          sas-rabbitmq-stderr
       # sas-rabbitmq-server STDERR
       Format        regex
       regex         (?<message>.*level=(?<level>\w+)\s.*)
[PARSER]
       Name          etcd
       # Only first 3 digits of sub-seconds captured
       Format        regex
       regex         (?<timestamp>\d{4}-\d{2}-\d{2} (\d{2}:?){3}\.\d{3})\d{3} (?<level>\w{1}) \| (?<message>.+)
       Time_Key      timestamp
       Time_format   %Y-%m-%d %H:%M:%S.%L
[PARSER]
       Name          misc2brackets
       #Example:     2021/07/02 00:56:37 [info] here is a message
       Format        regex
       regex         (?<timestamp>\d{4}(\/\d{2}){2}\s+(\d{2}:?){3})\s+(?<message>(\[(?<level>\w+)\])+.+)
       Time_Key      timestamp
       Time_format   %Y/%m/%d %H:%M:%S
[PARSER]
       Name          misc2colon
       #Example:     2021/07/02 00:56:37 info: here is a message
       Format        regex
       regex         (?<timestamp>\d{4}(\/\d{2}){2}\s+(\d{2}:?){3})\s+(?<message>((?<level>\w+):)+.+)
       Time_Key      timestamp
       Time_format   %Y/%m/%d %H:%M:%S
[PARSER]
       Name          misc3
       Format        regex
       regex         (?<timestamp>\d{4}(-\d{2}){2} \d{2}(:\d{2}){2})\s+-\s+\[(?<level>[A-Z]*)\]\s+-\s+(?<message>.*)
       Time_Key      timestamp
       Time_format   %Y-%m-%d %H:%M:%S
[PARSER]
       Name          logfmt
       Format        logfmt
[PARSER]
       Name          crunchy_stderr3
       Format        regex
       regex         (?<timestamp>\d{4}(\/\d{2}){2} (\d{2}:?){3})\s+(?<level>[A-Z]{3})\s+(?<message>.+)
       Time_Key      timestamp
       Time_format   %Y/%m/%d %H:%M:%S
[PARSER]
       # crunchy apiserver sample: time="2020-05-21 18:54:21 +0000" level=info msg="listening on port 8443" func="main.main()" file="apiserver.go:171" version=4.2.2
       Name          collectapi
       Format        regex
       regex         time="(?<timestamp>\d{4}(-\d{2}){2}\s(\d{2}:?){3})(?<timezone>.*)"\s+level=(?<level>\w+)\s+((msg=)"(?<message>.*?)"\s?)?(?<message2>.*)
       Time_Key      timestamp
       Time_format   %Y-%m-%d %H:%M:%S
[PARSER]
       # crunchy collect sample: time="2020-05-21T18:53:10Z" level=info msg="Starting Server: :9187" source="postgres_exporter.go:1178"
       Name          collectapiT
       Format        regex
       regex         time="(?<timestamp>\d{4}(-\d{2}){2}T(\d{2}:?){3})(?<timezone>.*)"\s+level=(?<level>\w+)\s+((msg=)"(?<message>.*?)"\s?)?(?<message2>.*)
       Time_Key      timestamp
       Time_format   %Y-%m-%dT%H:%M:%S
[PARSER]
       Name          crunchy_green
       Format        regex
       regex         (\e\[0;\d+m)(?<timestamp>\w{3} \w{3}\s\d\d?\s(\d{2}:?){3} \w{3} \d{4}) (?<level>\w+): (?<message>.+)(\e\[0m)
       Time_Key      timestamp
       Time_format   %a %b %e %T %Z %Y
[PARSER]
       Name          gopanic
       Format        regex
       regex         (?<message>(?<level>^panic):.*)
[PARSER]
       Name          crunchy_stderr2
       Format        regex
       regex         (?<timestamp>\d{4}-\d{2}-\d{2} (\d{2}:?){3}.\d{3} .+) \[.+\] (?<level>\w+):\s+(?<message>.+)
       Time_Key      timestamp
       Time_format   %Y-%m-%d %k:%M:%S.%L %Z

[PARSER]
       Name          misc5
       # a plain-ish format 
       # Example:  2020-06-12 20:51:13 - [INFO]  - An exciting message goes right here
       Format        regex
       regex         (?<timestamp>\d{4}(-\d{2}){2} (\d{2}:?){3}) - \[(?<level>\w+)\]\s+-\s+(?<message>.*)
       Time_Key      timestamp
       Time_format   %Y-%m-%d %T

[PARSER]
       Name          misc6
       # a plain-ish format, similar to misc5 but w/sub-seconds (only 3 digits used) and no dashes between LEVEL and other components
       # Example:  2020-06-12 21:12:12.0591 [INFO] ResourceManager.cpp::179:[RUNTIME] base locale set to en-US
       Format        regex
       regex         (?<timestamp>\d{4}(-\d{2}){2} (\d{2}:?){3}.\d{3})\d?\s+\[?(?<level>\w+)\]?\s+(?<message>.*)
       Time_Key      timestamp
       Time_format   %Y-%m-%d %H:%M:%S.%L
[PARSER]
       Name          misc7
       # a plain-ish format, similar to misc6 but w/"T" b/w date and time, no brackets around LEVEL
       # Example:  2020-06-12T20:53:13.436  INFO --- filesystem-init-agent loaded
       Format        regex
       regex         (?<timestamp>\d{4}(-\d{2}){2}T(\d{2}:?){3}.\d{3})\s+(?<level>\w+)\s+(?<message>.*)
       Time_Key      timestamp
       Time_format %Y-%m-%dT%H:%M:%S.%L
[PARSER]
       Name          crunchy_event       
       # NOTE: Only first 3 digits of sub-seconds captured
       # Example 1:  [nsqadmin] 2020/10/19 15:05:39.567309 INFO: HTTP: listening on [::]:4171
       # Example 2:  [nsqd] 2020/10/19 15:15:02.009226 ERROR: client(10.254.1.170:40388) - failed to read command - read tcp 10.254.5.83:4150->10.254.1.170:40388: i/o timeout
       Format        regex
       regex         \[(?<caller>\w+)\]\s+(?<timestamp>\d{4}(\/\d{2}){2} \d{2}:\d{2}:\d{2}\.\d{3})\d{3} (?<level>[A-Z]*): (?<message>.*)
       Time_Key      timestamp
       Time_format   %Y/%m/%d %H:%M:%S.%L
[PARSER]
       Name          truncatedjson
       # the first fragment of a very long JSON structured log message broken up b/c it is longer than 16K (docker limit)
       Format        regex
       regex         {\s*"level":\s*"(?<level>\w+)",\s*"version":\s*\d,\s*"source":\s*"(?<source>\S*?)",(?<message>(\s*"messageKey":\s*"(?<messageKey>.*?)",)?.*)
[PARSER]
       Name          misc8
       # a plain-ish format, with "odd" timestamp and may (or may not) contain level info
       # Example:  Thu Jan  7 17:00:17 UTC 2021 - HTTP_ADDR is not defined, but CERTIFICATE_FILE is. Setting HTTP_ADDR to https://localhost:8500
       # Example:  Thu Jan  7 16:58:38 UTC 2021 - [INFO]  - Copying default configuration artifacts from /opt/config/etc/cas/default to /config
       Format        regex
       regex         (?<datetime>(?<dow>\w{3})\s*(?<month>\w{3})\s*(?<day>\d{1,2})\s?(?<time>\d{2}:\d{2}:\d{2}\s?UTC)\s?(?<year>\d{4}))\s*-\s*(?<level>\[\w*\])?(\s*-\s*)?(?<message>.*)
       Time_Key      timestamp
       Time_format %a %b %e %T %Z %Y
[PARSER]
       Name          level_only_brackets
       # Example:    [INFO] some lengthy bit of text
       Format        regex
       regex         ^(\[(?<level>[A-Za-z]+)\])\s*(?<message>.*)
[PARSER]
       Name          level_only_colon
       # Example 1:  ERROR: There was an error
       Format        regex
       regex         ^(?<level>[A-Za-z]+):\s*(?<message>.*)
[PARSER]
       Name          sas_log
       # Example 1:  [INFO] some lengthy bit of text
       Format        regex
       regex         ^(?<message>((?<level>FATAL|ERROR|WARNING|NOTE|INFO|DEBUG|TRACE):){1}:?\s*(?<PROPS__msg_wo_lvl>.*))
[PARSER]
       Name criwithlog
       Format regex
       Regex ^(?<time>[^ ]+) (?<stream>stdout|stderr) (?<logtag>[^ ]*) (?<log>.*)$
       Time_Key time
       Time_Format %Y-%m-%dT%H:%M:%S.%L%z
       Time_Keep On
[PARSER]
       Name          haproxy_default
       # haproxy - default log format
       # Example:    <134>Jun 23 21:43:41 haproxy[26]: Connect from ::1:47742 to ::1:9445 (main/TCP)
       Format        regex
       regex         <\d+>(?<timestamp>.{15})\s+haproxy\[(?<PROPS__pid>\d+)\]:\s+(?<message>Connect from\s+(?<PROPS__source>\S+)\s+to\s(?<PROPS__destination>\S+)\s+\((?<PROPS__frontend>\S+)\/(?<PROPS__mode>\S+)\))
       Time_Key      timestamp
       Time_format %b %d %T 
[PARSER]
       Name          openvswitch
       # haproxy - default log format
       # Example:    
       Format        regex
       regex         (?<timestamp>\d{4}(-\d{2}){2}T(\d{2}:?){3}.\d{3})(?<timezone>\S*)\|(?<PROPS__seqno>\d+)\|(?<PROPS__module>\w+)\|(?<level>\w+)\|(?<message>.+)
       Time_Key      timestamp
       Time_format %Y-%m-%dT%H:%M:%S
[PARSER]
       Name          keepalived
       # Example:    Fri Jun 25 16:18:22 2021: Printing VRRP data for process(9) on signal  
       Format        regex
       regex         (?<datetime>(?<dow>\w{3})\s*(?<month>\w{3})\s*(?<day>\d{1,2})\s?(?<time>\d{2}:\d{2}:\d{2})\s?(?<year>\d{4}))\s?:\s?(?<message>.+)
       Time_Key      datetime
       Time_format   %a %b %d %T %Y
[PARSER]
       Name          etcd2
       # Example:    WARNING: 2021/06/25 09:00:22 grpc: Server.processUnaryRPC failed to write status: connection error: desc = "transport is closing"
       Format        regex
       regex         (?<level>\w+):\s+(?<timestamp>\d{4}(\/\d{2}){2}\s+(\d{2}:?){3})\s+(?<message>.+)
       Time_Key      timestamp
       Time_format   %Y/%m/%d %H:%M:%S
[PARSER]
       Name          timestamp_only
       #Example:     2021/07/02 00:56:37 here is a message
       Format        regex
       regex         (?<timestamp>\d{4}(\/\d{2}){2}\s+(\d{2}:?){3})\s+(?<message>.+)
       Time_Key      timestamp
       Time_format   %Y/%m/%d %H:%M:%S
[PARSER]
       Name          prom_op
       #Example:     level=info ts=2021-07-02T01:05:20.678209682Z caller=operator.go:1154 component=prometheusoperator msg="sync prometheus" key=openshift-monitoring/k8s
       Format        regex
       regex         level=(?<level>\w+)\s+ts=(?<timestamp>\d{4}(-(\d{2})){2}T(:?\d{2}){3}\.\d+)Z(\s+caller=(?<PROPS__caller>\S+))?(\s+component=(?<PROPS__component>\w+))?\s+msg="(?<message>.+)"(\s+key=(?<PROPS__key>.+))?(\s+servicemonitor=(?<PROPS__servicemonitor>\S+))?(\s+namespace=(?<PROPS__namespace>\S+))?(\s+prometheus=(?<PROPS__prometheus>\S+))?
       Time_Key      timestamp
       Time_format   %Y-%m-%dT%H:%M:%S.%L
[PARSER]
       Name          singlestore_exporter
       #Example:     time="2022-03-24T16:08:53Z" level=info msg="Starting memsql_exporter (version=7.6.2, branch=, revision=f31887c)" source="memsql_exporter.go:598"
       #Very similar: collectapiT (above, w/o source)
       Format        regex
       regex         time="(?<timestamp>\d{4}(-\d{2}){2}T(\d{2}:?){3})(?<timezone>.*)"\s+level=(?<level>\w+)\s+((msg=)"(?<message>.*?)")?(\s+(source=")(?<source>\S*)")?([^\S\r\n](?<message2>.*))?
       Time_Key      timestamp
       Time_format   %Y-%m-%dT%H:%M:%S
[PARSER]
       Name          singlestore_node
       #Example:     2022-03-24 16:19:02.454 INFO: Query (null).'SELECT HEARTBEAT_NO_LOGGING agg.AGGREGATOR_ACTIVITY_NAME, coalesce(sum(leaves.memory_bs)*1000/agg.elapsed_time_ms/0x400/0x400, 0):>bigint,coalesce(agg.elapsed_time_ms/agg.numRuns, @):>bigint as avg_runtime, coalesce(sum(leaves.cpu_time_ms)/agg.numRuns, @):>bigint as avg_cpu_time FROM (select aggregator_activity_name, sum(elapsed_time_ms) as elapsed_time_ms, sum(success_count) as numRuns from information_schema._WM_AGG_TABLE group by 1) agg left join information_schema._WM_LEAF_TABLE leaves on agg.aggregator_activity_name = leaves.aggregator_activity_name group by agg.AGGREGATOR_ACTIVITY_NAME' submitted for asynchronous compilation
       Format        regex
       regex         (?<timestamp>\d{4}(-\d{2}){2} (\d{2}:?){3}.\d{3})\s+(?<level>\w+):\s+(?<message>.*)
       Time_Key      timestamp
       Time_format   %F %H:%M:%S.%L
[PARSER]
       Name          singlestore_operator
       #Example:     2022/04/21 21:38:13 clustering.go:119       {memsql}       Ensuring all node-memsql-cluster-leaf-ag1 are added to the MA 2022/04/21 21:38:13 clustering.go:119       {memsql}       Ensuring all node-memsql-cluster-leaf-ag1 are added to the MA
       Format        regex
       regex         (?<datetime>\d{4}(\/\d{2}){2} (\d{2}:?){3})\s+(?<source>\S+)\s+(?<component>\S+)\s+(?<message>.+)
       Time_Key      timestamp
       Time_format   %Y/%m/%d %H:%M:%S


